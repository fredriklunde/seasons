{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js","useLocation.js"],"names":["seasonConfig","summer","text","iconName","winter","SeaseonDisplay","props","lat","month","season","Date","getMonth","_seasonConfig$season","react_default","a","createElement","className","concat","Spinner","message","defaultProps","ReactDOM","render","content","_useLocation","_useState","useState","_useState2","Object","slicedToArray","setLat","_useState3","_useState4","errorMessage","setErrorMessage","useEffect","window","navigator","geolocation","getCurrentPosition","position","coords","latitude","err","useLocation","_useLocation2","src_SeasonDisplay","src_Spinner","document","querySelector"],"mappings":"gKAGMA,SAAe,CACjBC,OAAQ,CACJC,KAAM,qBACNC,SAAU,OAEdC,OAAQ,CACJF,KAAM,qBACNC,SAAU,eA2BHE,EAfQ,SAACC,GACpB,IATeC,EAAKC,EASdC,GATSF,EASUD,EAAMC,KATXC,GASgB,IAAIE,MAAOC,YARrC,GAAKH,EAAQ,EACZD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIFK,EAEHZ,EAAaS,GAAhCP,EAFsBU,EAEtBV,KAAMC,EAFgBS,EAEhBT,SAEd,OACIU,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBAAAC,OAAoBR,IAC9BI,EAAAC,EAAAC,cAAA,KAAGC,UAAS,qBAAAC,OAAuBd,EAAvB,WACRU,EAAAC,EAAAC,cAAA,UACCb,GAELW,EAAAC,EAAAC,cAAA,KAAGC,UAAS,sBAAAC,OAAwBd,EAAxB,aC9BlBe,EAAU,SAACZ,GACb,OACIO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsBV,EAAMa,WAKvDD,EAAQE,aAAe,CACnBD,QAAS,WAGED,QCOfG,IAASC,OAAOT,EAAAC,EAAAC,cAfJ,WAAM,IAGVQ,EAHUC,ECHH,WAAM,IAAAC,EACKC,mBAAS,MADdC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACVlB,EADUoB,EAAA,GACLG,EADKH,EAAA,GAAAI,EAEuBL,mBAAS,IAFhCM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAEVE,EAFUD,EAAA,GAEIE,EAFJF,EAAA,GAWjB,OAPAG,oBAAU,WACNC,OAAOC,UAAUC,YAAYC,mBACzB,SAAAC,GAAQ,OAAIV,EAAOU,EAASC,OAAOC,WACnC,SAAAC,GAAG,OAAIT,EAAgBS,EAAIxB,YAEhC,IAEI,CAACZ,EAAK0B,GDPeW,GADdC,EAAAjB,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACPjB,EADOsC,EAAA,GACFZ,EADEY,EAAA,GAYd,OAPItB,EADAU,EACUpB,EAAAC,EAAAC,cAAA,qBAAakB,GAChB1B,EACGM,EAAAC,EAAAC,cAAC+B,EAAD,CAAevC,IAAKA,IAEpBM,EAAAC,EAAAC,cAACgC,EAAD,CAAS5B,QAAQ,mCAGxBN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcO,IAGxB,MAASyB,SAASC,cAAc","file":"static/js/main.28bfaf53.chunk.js","sourcesContent":["import './SeasonDisplay.css';\r\nimport React from 'react';\r\n\r\nconst seasonConfig = {\r\n    summer: {\r\n        text: 'lets hit the beach',\r\n        iconName: 'sun'\r\n    },\r\n    winter: {\r\n        text: 'Burr, it is chilly',\r\n        iconName: 'snowflake'\r\n    }\r\n}\r\n\r\nconst getSeason = (lat, month) => {\r\n    if(month> 2 && month < 9){\r\n        return lat > 0 ? 'summer' : 'winter';\r\n    }else {\r\n        return lat > 0 ? 'winter' : 'summer';\r\n    }\r\n}\r\n\r\nconst SeaseonDisplay = (props) => {\r\n    const season = getSeason(props.lat, new Date().getMonth());\r\n    const { text, iconName } = seasonConfig[season];\r\n\r\n    return (\r\n        <div className={`season-display ${season}`}>\r\n            <i className={`icon-left massive ${iconName} icon`} />\r\n                <h1>\r\n                {text}\r\n                </h1>\r\n            <i className={`icon-right massive ${iconName} icon`} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SeaseonDisplay;","import React from 'react';\r\n\r\nconst Spinner = (props) => {\r\n    return (\r\n        <div className=\"ui active dimmer\">\r\n            <div className=\"ui big text loader\">{props.message}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nSpinner.defaultProps = {\r\n    message: 'loading'\r\n}\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SeasonDisplay from './SeasonDisplay';\r\nimport Spinner from './Spinner';\r\nimport useLocation from './useLocation';\r\n\r\nconst App = () => {\r\n    const [lat, errorMessage] = useLocation();\r\n\r\n    let content;\r\n    if (errorMessage) {\r\n        content = <div>Error: {errorMessage}</div>\r\n    } else if (lat) {\r\n        content = <SeasonDisplay lat={lat} />;\r\n    } else {\r\n        content = <Spinner message=\"Please accept location request\" />; \r\n    }\r\n    \r\n    return <div className=\"border red\">{content}</div>\r\n}\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));","import {useState, useEffect} from 'react';\n\n\nexport default () => {\n    const [lat, setLat] = useState(null)\n    const [errorMessage, setErrorMessage] = useState('')\n\n    useEffect(() => {\n        window.navigator.geolocation.getCurrentPosition(\n            position => setLat(position.coords.latitude),\n            err => setErrorMessage(err.message)\n        );\n    }, []);\n\n    return [lat, errorMessage];\n};"],"sourceRoot":""}